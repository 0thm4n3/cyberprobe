\input texinfo   @c -*-texinfo-*-

@comment $Id@w{$}
@comment %**start of header
@setfilename cyberprobe.info
@include version.texi
@include paths.texi

@settitle Cyberprobe @value{VERSION}
@syncodeindex pg cp
@comment %**end of header

@copying
This manual is for Cyberprobe (version @value{VERSION}, @value{UPDATED}),
which is an example in the Texinfo documentation.

Copyright @copyright{} 2013-2014 Cyber MacGeddon

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* overview: (overview)Overview.
@end direntry

@titlepage
@title Cyberprobe
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Cyber MacGeddon (@email{cyberprobe-general@@lists.sourceforge.net})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c @ifnottex
@node Top
@top Cyberprobe

This is the manual for Cyberprobe (version @value{VERSION}, @value{UPDATED}).

Cyberprobe is a distrbuted architecture for real-time monitoring of networks
against attack. The software consists of a number of components, including:

@itemize @bullet

@item
a probe, which collects data packets and forwards it over a network in
standard streaming protocols.

@item
a monitor, which receives the streamed packets, decodes the protocols, and
interprets the information.

@end itemize

These components can be used together or separately. For a simple
configuration, they can be run on the same host, for more complex
environments, a number of probes can feed a single monitor. For more detail,
and to see where we are going, read the @ref{Architecture} page.

@c @end ifnottex

@menu
* Overview::
* Obtaining code::
* Quick start tutorial::
* Reference::
* Architecture::
* GNU Free Documentation License::
* Index::
@end menu

@node Overview
@chapter Overview

@cindex Overview of Cyberprobe
@heading Summary

Cyberprobe is a distrbuted architecture for real-time monitoring of networks
against attack. The software consists of a number of components, including:

@itemize @bullet

@item
a probe, which collects data packets and forwards it over a network in
standard streaming protocols.

@item
a monitor, which receives the streamed packets, decodes the protocols, and
interprets the information.

@end itemize

@cindex @command{cyberprobe}, features
@cindex Features, of @command{cyberprobe}

These components can be used together or separately. For a simple
configuration, they can be run on the same host, for more complex
environments, a number of probes can feed a single monitor. For more detail,
and to see where we are going, read the @ref{Architecture} page.

The probe, @command{cyberprobe} has the following features:

@itemize @bullet

@item
The probe can be tasked to collect packets from an interface and forward any
which match a configurable address list.

@item
The probe can be configured to receive Snort alerts. In this configuration,
when an alert is received from Snort, the IP source address associated with
the alert is dynamically targeted for a period of time. In such a
configuration, the system will collect data from any network actor who
triggers a snort rule and is thus identified as a potential attacker.

@item
The probe can optionally run a management interface which allows remote
interrogation of the state, and alteration of the configuration. This
allows dynamic alteration of the targeting map, and integration with other
systems.

@item
The probe can be configured to deliver on one of two standard stream
protocols.

@end itemize

@cindex @command{cybermon}, features
@cindex Features, of @command{cybermon}

The monitor tool, @command{cybermon} has the following features:

@itemize @bullet

@item
Collects packets delivered in stream protocols.

@item
Decodes packet protocols in and raises events in near-real-time.

@item
Decoded information is made available to user-configurable logic to define
how the decoded data is handled. A simple configuration language is used
(LUA) and example configurations are provided to monitor data volumes,
display data hexdumps, or stash the data in files.

@item
Packet forgery techniques are included, which allow resetting TCP
connections, and forging DNS responses. This can be invoked from your LUA in
order to fight back against attacks on your network.

@item
Supports IP, TCP, UDP, ICMP, HTTP and DNS protocols, currently.

@end itemize

The cybermon software is a bit of a work-in-progress at the moment, and
needs more protocols added, but there's enough capability to be useful, and
to demonstrate the value of this architecture.

The code is targeted at the Linux platform, although it is generic enough to
be applicable to other UN*X-like platforms.

The easiest way to learn about the software is to follow our Quick Start
tutorial.

@cindex Cyberprobe, motivation
@heading Motivation

Cyberprobe started out as a research tool to study networked applications to
find out what they were doing, as we all know how software suppliers
sometimes like to add some "extras" to their software :). So, a simple tool
to configure how packets are captured from a network was produced. But as
you are probably aware, the biggest threat to the safety of your information
is from outside of your network. Thus, the ability to trigger collection of
packets upon detection of a Snort rule hit was added.

Snort is a powerful IDS system which studies packets on your network,
analyses them against a set of signatures and creates logs and alerts. We
felt there was a need to harness the Snort alerts, but use them to trigger
collection and forwarding of packets from the address which caused the
alert.

You may be asking why you'd want to use Cyberprobe? After all, monitoring
networks with tcpdump and Snort and collecting alerts and packet data for
analysis is a straightforward process for many networks. However, real-time
analysis is not possible if everything is file based. Collecting the data
and forwarding over the network to a central collection point allows for a
much more "industrialised" approach to intrusion detection. If you detect an
attack attempt, and then observe vast quantities of data leaving your
network from the credit card accounts database, then you know you need to
act quickly.

You need flexibility about how you monitor for network attacks. There isn't
a one-size-fits-all solution. Attackers are ingenious in their approach to
attacking your network, so you need to have a flexible, configurable
monitoring tool to develop your defences.

@cindex Cybermaggedon
@cindex Prophesy of doom
@heading Warning

There's a war coming... The enemy is resourceful, they can use your networks
and systems as their own weapon. But with the right tools, you can prepare a
defence. It's time to get ready for Cybermaggedon.

@cindex Release history
@cindex Version history
@heading Revision history

Cyberprobe releases:

@table @code

@item 0.55
Packages released for Debian, Fedora and Centos, documentation
re-worked into info and man formats.

@item 0.50
ElasticSearch integration improved to get a much tighter integration with
Kibana for a network dashboard. Also bug-fixes for memory management / lock
problems.

@item 0.40
Now includes prototype STIX support: A TAXII server allows distrubution of
threat information, and a TAXII client can read indicator information and
store in a way that cybermon can use.

@item 0.30
The build process now uses the GNU toolset. It detects the LUA interface and
can compile against LUA 5.1 and 5.2. Successfully compiled on a MacBook!

@item 0.25
Added SMTP and FTP capability. Also added a primitive mechanism to visualise
network observations.

@item 0.20
HTTP and DNS protocol capability. TCP reset and DNS packet forgery
added. Major overhaul of the LUA language interface.

@item 0.12
Cybermon utility is configurable using LUA.

@item 0.11
Added basic cybermon utility.

@item 0.10
Added management interface.

@item 0.9
First release on SourceForge.

@end table

@node Obtaining code
@chapter Obtaining code

You can either download the latest release on the downloads page
(@url{http://sourceforge.net/projects/cyberprobe/files/}), or checkout the
latest code using git:

@example
git clone http://git.code.sf.net/p/cyberprobe/code cyberprobe
@end example

Powered by SourceForge, project page is at
@url{http://www.sourceforge.net/p/cyberprobe}.

@node Quick start tutorial
@chapter Quick start tutorial
@cindex Getting started


@menu
* Preparation::
* Using @command{cyberprobe}::
* Management interface::
* Integration with @command{snort}::
* Using @command{cybermon}::
* Writing your own configuration file::
* Visualisation::
* Threat indicators using STIX::
@end menu

@node Preparation
@section Preparation


@cindex Building
@cindex Downloading
@cindex Compilation
@cindex Packages
@cindex Installation
@heading Build software

There's a fair amount of development taking place in the git repository, so
you probably want to get the latest release on the downloads page
(@url{http://sourceforge.net/projects/cyberprobe/files/}). Download,
unpack, and compile. The configure option 'prefix' can be used to say where
the software will install. Choose a location or go with @file{/usr/local}.

@example
./configure --prefix=/usr/local
make
sudo make install
@end example

If compiling for Mac OS, read README.mac.

If you do want to track the latest code, checkout the latest code from git:

@cindex Checkout from @command{git} repository
@cindex @command{git} repository

@example
git clone http://git.code.sf.net/p/cyberprobe/code cyberprobe
@end example

Compilation is a little more long-winded if you use the git source:

@example
autoreconf -fi
./configure --prefix=/usr/local
make
sudo make install
@end example

The code doesn't have many dependencies. Exotic dependencies are:

@cindex dependencies
@cindex Build dependencies
@cindex Boost
@cindex Lua
@cindex @code{libpcap}
@cindex @code{expat}
@cindex @code{tcpdump}
@cindex @code{telnet}

@itemize

@item
Boost regex.

@item
Boost shared pointer.

@item
LUA - 5.1 or later.

@item
GCC C++ compiler and development support.

@item
libpcap.

@item
Expat (XML parser).

@item
tcpdump - not needed to build the software, but we use it in this tutorial.

@item
telnet - not needed to build the software, but we use it in this tutorial.

@end itemize

Note: on many platforms, installing a package just adds the "run time" part
of the code. In order to be able to compile code against the run time, you
need to install a separate "developers kit" package. On Fedora, for
instance, both @code{libpcap} and @code{libpcap-devel} are needed in order to
be able to build this code.

@cindex Executables
@cindex Build targets

The compilation process compiles the following executables:

@table @command

@cindex @command{cyberprobe}
@item cyberprobe
The Cyber Probe executable.

@cindex @command{cybermon}
@item cybermon
Data analyser, analyses the data streams and reports events.

@cindex @command{etsi_rcvr}
@item etsi_rcvr
Test decoder for ETSI format data.

@cindex @command{nhis11_rcvr}
@item nhis11_rcvr
Test decoder for NHIS1.1 format data.

@cindex @command{cybermon_cli}
@item cybermon_cli
Cyberprobe control command-line client.

@end table

FIXME: Mention packaging, and downloading packages.

@cindex Discussion forums

If that builds without errors, then it's time to start something up.  If you
have problems you can't resolve head to the discussion forums
(@url{https://sourceforge.net/p/cyberprobe/discussion/}).

@cindex Network parameters
@heading Establish network parameters

The simplest way to use cyberprobe is to use it on a Linux workstation, or
in a virtual machine.  Maybe you're using a Linux desktop now now?  If so,
you could use it to capture all the data going to/from the internet. This
will be a static configuration in order to keep things simple. We'll do
dynamic tracking later.

In the next few steps, you'll use @command{cyberprobe} to capture some data,
on your workstation, and stream it to @command{etsi_rcvr} so that you know it's
working. But first, you'll need to collect some information about your
configuration.

@cindex @command{ifconfig}

You need to know the name of the network interface you are using. The
command @command{/sbin/ifconfig} will show you all the network interfaces
your machine knows about. e.g.

@example
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10
        [etc.]

eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.80  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::a60:6eff:fe81:7a75  prefixlen 64  scopeid 0x20
        [etc.]
@end example

The lo interface is a loopback interface, and isn't really on the network,
so ignore that. It's an interface that gets packets going to
@code{127.0.0.1} and makes sure they end up handled by your
workstation. Your interface is quite likely to be called something like
eth0. The other thing you need to know is the IP address of your
workstation. The IP address is associated with an interface, so in the above
example, I can see I have an IP address @code{192.168.1.80}.

Note: on some networks (like mine) the IP address is allocated
dynamically. In my case, the IP address is allocated by the broadband
router. If things aren't working as you expect, you should check your IP
address to check your workstation hasn't been allocated a new, different
address. In my case, I can tell the broadband router to permanently allocate
a particular IP address to this workstation, so that it won't change.

@node Using @command{cyberprobe}
@section Using @command{cyberprobe}
@cindex @command{cyberprobe}
@cindex @command{cyberprobe} configuration

@heading Starting cyberprobe with a configuration file

The source code contains a file @file{config.xml} which is a good template
for any configuration you're going to build. However, for the purpose of
this discussion, let's start from scratch. In order to do anything useful,
there are three essential elements to a cyberprobe configuration file:
interfaces, targets and endpoints. The system won't do anything useful
without those three configuration elements defined. Let's start with a very
simple configuration.

Using your favourite text editor, create a text file, say @file{c.xml} with the
following contents:

@example
<?xml version="1.0" encoding="ISO-8859-1"?>

<configuration>

  <interfaces>
    <interface name="eth0"/>
  </interfaces>

  <targets>
  </targets>

  <endpoints>
  </endpoints>

</configuration>
@end example

Note: You should replace the @code{eth0} string with the name of your
network interface. Remember? We discovered that when playing with the
@command{ifconfig} command.

@cindex Privileged user

We're ready to roll. We need to run as a privileged used because cyberprobe
captures data off the network interface. So, running as root, you need to
locate the place where you compiled the code, and run @command{cyberprobe}
giving it the name of the configuration file you just created:

@example
cyberprobe c.xml
@end example

If everything goes to plan, you should see the following output:

@example
Capture on interface eth0 started.
@end example

If you see an error message, the obvious two things to check are:

@itemize

@item
Did you name a network interface correctly? See @command{ifconfig}
discussion above.

@item
Are you running as a privileged user?

@end itemize

If you see no output at all, check that your configuration file is correct.

Once you are seeing the "Capture on interface eth0" line, then you've
achieved success in this step, and are ready to move on.

If you have everything working, there's one thing to note before moving on:
cyberprobe treats a broken configuration file the same as an empty
configuration file. With cyberprobe running, edit the configuration file,
and delete the query (@samp{?}) prefix in the first line, so that it looks like
this:

@example
<xml version="1.0" encoding="ISO-8859-1"?>
@end example

You've now broken the configuration file. It's not valid XML any more, so
the parsing fails. You should see this output from @command{cyberprobe}:

@example
Capture on interface eth0 stopped.
@end example

If you repair the damage to the configuration file, everything will start
working again. The lesson here is: If you find that @command{cyberprobe}
won't recognise any resources, it's likely that your configuration file is
invalid. The utility @command{xmlwf}x can be useful to check that an XML
configuration file is valid, if you're not getting the results you expect.

@cindex Target
@cindex @command{cyberprobe}, target
@heading Adding a target

We have @command{cyberprobe} running, but it isn't doing anything
useful. Remember, I said that a useful configuration consists of three
minimal elements: interfaces, targets and endpoints? Well, currently we only
have interfaces defined. That means that @command{cyberprobe} is capturing
packets off of the network, but throwing them away.

Let's add a target. Edit the targets block of the configuration file. We
need an entry describing the IP address of my workstation. Remember? We
discovered that with the ifconfig command earlier? Instead of
@code{192.168.1.80} use the IP address of your workstation.

@example
<targets>
  <target address="192.168.1.80" liid="123456"/>
</targets>
@end example

If successful, you should see new output from @command{cyberprobe}:

@example
Added target 192.168.1.80 -> 123456.
@end example

At this step, we're capturing packets, spotting target addresses, but as
there's no endpoint defined there's still nowhere to send the data. So, this
is still a useless configuration. On to the next step...

@heading Adding an endpoint
@anchor{Adding an endpoint}

Adding an endpoint to the configuration file will define a place where the
captured data is sent. Before adding an endpoint, let's make sure there's
something ready to receive the data.

In a separate terminal window, navigate to the @command{cyberprobe} build,
and run:

@cindex @command{etsi_rcvr}

@example
etsi_rcvr 10000 | tcpdump -n -r -
@end example

The @command{etsi_rcvr} program opens a TCP port listening on port 10000 for
a stream of ETSI data, and on standard output, writes the IP packets it sees
in PCAP format. The tcpdump command receives this PCAP data, and outputs
packet summaries.

If that starts successfully, the next step is to plumb a connection from
@command{cyberprobe} to @command{etsi_rcvr}.

Next, edit the configuration file, and edit the endpoints block to deliver
packets to a local service on port 10000:

@cindex Endpoint
@cindex @command{cyberprobe}, endpoint

@example
<endpoints>
  <endpoint hostname="localhost" port="10000" type="etsi"/>
</endpoints>
@end example

If that worked, you should see @command{cyberprobe} start the endpoint:

@example
Added endpoint localhost:10000 of type etsi
@end example

Hopefully you'll start to see some output from tcpdump...

@heading Capturing data

At this step, @command{cyberprobe} should be forwarding an network traffic
your workstation generates to the tcpdump command, so that you see data. Any
average workstation is generating network traffic all the time, so you won't
need to do anything. But if you see nothing, you can do something like,
visit the Google home page in a browser on your workstation. You should see
something like this pouring from the tcpdump.

@example
18:54:24.376838 IP 192.168.1.80.54249 > 212.58.244.71.http: Flags [P.], seq 
1:673, ack 1, win 115, options [nop,nop,TS val 129851063 ecr 3366955869], l
ength 672
18:54:24.390768 IP 212.58.244.71.http > 192.168.1.80.54249: Flags [.], ack 
673, win 124, options [nop,nop,TS val 3366955882 ecr 129851063], length 0
18:54:24.392909 IP 212.58.244.71.http > 192.168.1.80.54249: Flags [P.], seq 
1:1796, ack 673, win 124, options [nop,nop,TS val 3366955884 ecr 129851063],
 length 1795
@end example

At this step, it's worth having a quick play with the reconnection
mechanism. Stop and start @command{etsi_rcvr}, and you'll see that
@command{cyberprobe} reconnects automatically:

@cindex Connection reset
@cindex Connection restart
@cindex Reconnection

@example
ETSI LI connection to localhost:10000 failed.
Will reconnect...
ETSI LI connection to localhost:10000 established.
@end example

We don't guarantee zero data loss on a reconnect.

@node Management interface
@section Management interface
@cindex Management
@cindex @command{cyberprobe}, management

At this step, we'll setup a control port, and use it modify the
configuration of @command{cyberprobe}.

First step is to modify the configuration file to include this line, just
after the @code{<configuration>} line:

@cindex Authentication

@example
<control port="8888" username="admin" password="mypassword"/>
@end example

That declares that a management service needs to be run on port 8888. The
authentication details are provided too. You should see this output from
@command{cyberprobe}:

@example
Starting control on port 8888
@end example

That's good! Now need to connect and interrogate the targets list: I use
telnet to connect, the auth command to authenticate, and the target command
to see a list of commands.

@example
$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
auth admin mypassword
200 Authenticated.
targets
201 Targets list follows.
25
123456:ipv4:192.168.1.80
@end example

I can use the help command to see the full list of commands permitted. There
are commands for changing the address target list:

@example
targets
201 Targets list follows.
25
123456:ipv4:192.168.1.80
remove_target ipv4 192.168.1.80
200 Removed target.
add_target 654321 ipv4 192.168.1.80
200 Added target.
@end example

The interface isn't pretty, but you get the idea. You can change almost
everything that you can manage by changing the configuration file.

Note: The the management interface changes the active state of
@command{cyberprobe} but it doesn't change the configuration file. So,
configuration changes made through the management interface are 'lost' when
you restart @command{cyberprobe}.

Note also that you may get some weird results if you use the configuration
file AND the control interface to manage the same resources, so you probably
don't want to do that.

@cindex @command{cyberprobe_cli}

FIXME: The @command{cyberprobe_cli} command can be used to access the
management interface but provides a (slightly) nicer @code{readline}
interface, and has auto-completion.

@node Integration with @command{snort}
@section Integration with @command{snort}
@cindex @command{snort}, integration
@cindex Integration with @command{snort}

In this step, we'll add the excellent IDS, Snort to the mix. If you don't
know Snort, it scans network traffic for patterns, and can take various
actions when those patterns are discovered. It is typically used to detect
network attacks, and the Snort folks maintain a huge collection of patterns
that will identify known network attacks. The Snort team maintain the
project at @url{http://www.snort.org}.

If you want to try out the Snort integration, you need to head over to the
Snort home page, download and install Snort.  Or install the appropriate
package with your distribution.

Once you have it installed, to simplify things, you'll want to put a
rule in place that will definitely identify things on your
network. The easiest way is to add a local rule that identifies your
workstation. First of all, you'll want to make sure your Snort
configuration file (probably @file{/etc/snort/snort.conf}) loads a
local rules file. So, it should contain something like this:

@cindex @command{snort}, rules
@cindex @command{snort}, signatures

@example
# site specific rules
include $RULE_PATH/local.rules
@end example

Then, to identify your workstation, add a rule like this to your local rules
file (probably @file{/etc/snort/rules/local.rules}):

@example
alert tcp 192.168.1.80 any -> any 80 (msg:"Web"; classtype:misc-activity; sid:200; rev:1;)
@end example

@command{cyberprobe} itself needs to be configured to receive Snort
alerts. You do that by adding some configuration, just after the
<configuration> line:

@example
<snort_alert socket="/var/log/snort/snort_alert" duration="60"/>
@end example

That says, Snort alerts will result in dynamic collection of data for 60
seconds from identification. While you're in the configuration file, you can
remove the static IP address target line. Find this line and delete it:

@example
<target address="192.168.1.80" liid="123456"/>
@end example

@command{cyberprobe} should respond:

@cindex @command{snort} alerts

@example
Removed target 192.168.1.80 -> 123456.
Start snort alerter on /var/log/snort/snort_alert
@end example

Now I can run Snort in IDS mode. Snort needs to run as 'root':

@example
snort -i eth0 -A unsock -N -l /var/log/snort/ -c /etc/snort/snort.conf
@end example

Thanks to our Snort rule, when our workstation generates network data, Snort
will detect it, trigger our rule, and alert @command{cyberprobe}. You should
see @command{cyberprobe} say:

@example
Hit on signature ID 200, targeting 192.168.1.80
@end example

Also, once the rule is triggered, you should see evidence of packet data
from the @command{tcpdump} command, as before. @command{cyberprobe} causes
the targeting to time out after a period of time. If further alerts are
seen, the targeting lifetime is targeted. If no further alerts are seen the
IP address targeting is deleted. If you can convince your workstation to
stop creating network data, by e.g. not using it for a minute or so, then
you should see the rule time out:

@example
Stopped targeting on 192.168.1.80
@end example

In practice this may be harder than you think, as workstations generate
network traffic all the time. You may have to turn off your email clients
and close the web browse. Your attempt to silence your workstation may be
further thwarted by the operating system checking for patches without you
knowing.

@cindex @command{cyberprobe}, delay
@cindex Delay
@heading Introducing a delay

Your Snort integration suffers from a particular problem now. The time taken
for Snort to inspect some packets, generate an alert and for
@command{cyberprobe} to get the IP address targeted is not zero. It is hard
to measure, but it is going to be a significant chunk of a millisecond. The
problem is that by the time @command{cyberprobe} is targeting the IP
address, the network attcker's packets have long gone. The result is, that
while @command{cyberprobe} is now targetting the attacker, it won't capture
the original network attack.

Our solution is to introduce a packet delay in @command{cyberprobe}. The
packets entering @command{cyberprobe} are kept in a time-delay queue and are
processed once that delay expires. You can configure a delay, by putting the
delay attribute in an interface specfication. e.g.

@example
<interfaces>
  <interface name="eth0" delay="0.2"/>
</interfaces>
@end example

0.2 second should be plenty enough. You should be able to see this delay in
action: When you generate network traffic, you should be able to see the
delay between network activity taking place, and the corresponding burst of
activity from tcpdump.

At this point, you've completed the guided tour of @command{cyberprobe}, the
packet capture tool. If that's all you need, the rest of the tutorial will
probably have less interest to you: In the following steps, we'll start to
analyse and act on the captured data.

@node Using @command{cybermon}
@section Using @command{cybermon}
@cindex @command{cybermon}
@cindex @command{cybermon}, configuration
@heading Introducing @command{cybermon}

The previous 9 steps have all been about @command{cyberprobe}. If you've got
this far successfully, you pretty much know all there is to know about
@command{cyberprobe}. It is time to start doing something more useful with
all that data you are capturing. In this step we'll start up
@command{cybermon} and look at the data.

@cindex @file{cybermon.lua}

Remember that @command{etsi_rcvr} command you started in step @ref{Adding an
endpoint}? Stop that, and start @command{cybermon}. Two arguments are
needed: A TCP port number to receive the data on, and a configuration which
tells it what to do. A number of configuration files are bundled in with the
source code, there should be a basic one called @file{cybermon.lua} which
is now installed in the etc directory, depending on where you installed the
software:

@example
cybermon 10000 @value{PREFIX}/etc/cyberprobe/cybermon.lua
@end example

Now when you generate network traffic, some of the traffic will be presented
in a reasonably intelligent form. For example, I do a naming service lookup
for @code{www.google.com}...

@example
host -t a www.slashdot.org
@end example

@cindex DNS

The DNS protocol is parsed, and presented in a human readable form. I can
see the request, and the response:

@example
SNORTc0a80150: 192.168.1.80:54633 -> 192.168.1.1:53. DNS query
    Query: www.slashdot.org

SNORTc0a80150: 192.168.1.1:53 -> 192.168.1.80:54633. DNS response
    Query: www.slashdot.org
    Answer: www.slashdot.org -> 216.34.181.48
@end example

I see the query travelling from my workstation to the broadband router, and
then the response from the broadband router contains an answer field mapping
the name to an address. HTTP protocols are also decoded. Get the Slashdot
home page...

@example
wget -O- 'http://www.slashdot.org/'
@end example

...and amongst all the other stuff, you see the HTTP request and response...

@example
SNORTc0a80150: 192.168.1.80:34284 -> 216.34.181.45:80. HTTP GET request
    URL /
    Connection: Keep-Alive
    User-Agent: Wget/1.14 (linux-gnu)
    Host: slashdot.org
    Accept: */*

SNORTc0a80150: 216.34.181.45:80 -> 192.168.1.80:34284. HTTP response 200 OK
    URL http://slashdot.org/
    Connection: keep-alive
    Content-Length: 113468
    Date: Mon, 26 Aug 2013 13:13:25 GMT
    Age: 17
    X-Varnish: 1493567531 1493567417
    X-XRDS-Location: http://slashdot.org/slashdot.xrds
    Cache-Control: no-cache
    Vary: Accept-Encoding
    SLASH_LOG_DATA: shtml
    Pragma: no-cache
    Content-Type: text/html; charset=utf-8
    Server: Apache/2.2.3 (CentOS)
@end example

@heading Trying other configuration files

In the previous step, you started @command{cybermon} with the cybermon.lua
configuration file. Have a play with a couple of the others. Configuration
file hexdump.lua produces little hex dumps of things like HTTP bodies:

@cindex @file{hexdump.lua}

@example
cybermon 10000 @value{PREFIX}/etc/cyberprobe/hexdump.lua
@end example

Configuration file @file{dump.lua} causes @command{cybermon} to dump the
information to files in the data directory.

@example
mkdir data
cybermon 10000 @value{PREFIX}/etc/cyberprobe/dump.lua
@end example

The @file{quiet.lua} configuration file does nothing. It may be a good place
to start hacking your own configuration file. Which is exactly what we'll do
in the next step.

@node Writing your own configuration file
@section Writing your own configuration file

Now, take a copy of the @file{quiet.lua} configuration file, and have a look
at it. It consists of a bunch of functions written in the LUA language. LUA
is a lightweight scripting langauge which is really good as a configuration
language. For example, this function is called when a TCP connection is
made:

@cindex @code{connection_up}
@cindex @code{http_response}

@example
observer.connection_up = function(context)
end
@end example

And this function is called when an HTTP response is observed:

@example
observer.http_response = function(context, code, status, header, url, body)
end
@end example

Let's get hacking! The header parameter is a LUA table which contains
key/value pairs from the header. The url parameter contains the full URL of
the response. The body parameter contains the payload body as an empty
string. Let's start simple:

@example
observer.http_response = function(context, code, status, header, url, body)
  print(url)
end
@end example

Then run that up...

@example
cybermon 10000 my.lua
@end example

Now, do some web browsing, and you should see a list of URLs flying
past. Each web page typically consists of several HTTP requests, but you
should be able to see the URLs associated with all of the web pages you
visit. Let's tart that up a little more:

@example
-- This function is called when an HTTP response is observed.
observer.http_response = function(context, code, status, header, url, body)

  -- Take first 40 characters of URL
  local u = url:sub(1,40)

  -- Get Content-Type (first 20 characters)
  local ct
  ct = ""
  for key, value in pairs(header) do
    if key:lower() == "content-type" then
      ct = value:sub(1,20)
    end
  end

  io.write(string.format("%-40s %-20s %d\n", u, ct, #body))

end
@end example

That basically outputs three columns: The URL (truncated to 40 characters),
the body content type (truncated to 20 characters) and the HTTP response
payload length. Here's what I get from visiting Slashdot:

@example
http://widget-cdn.rpxnow.com/manifest/sh text/javascript;char 42980
http://slashdot.org/                     text/html; charset=u 40105
http://ad.doubleclick.net/adj/ostg.slash text/javascript; cha 5625
http://pagead2.googlesyndication.com/pag application/x-shockw 33347
http://ad.doubleclick.net/adj/ostg.slash text/javascript; cha 540
http://ad.doubleclick.net/adj/ostg.slash text/javascript; cha 42
http://ad.doubleclick.net/adj/ostg.slash text/javascript; cha 452
http://pagead2.googlesyndication.com/pag                      0
@end example

@cindex TCP reset
@cindex Packet forgery
@heading Forging a TCP reset

So far, this has just been monitoring. It's time to add data to the network!
From the LUA functions, there are a couple of functions available which
allow you to put some packets back onto the network.

@cindex Packet forgery
@cindex Packet injection
@cindex @command{cyberprobe}, delay
@cindex Delay

But first... there's a problem. You remember in step 9, we added a delay?
That's not going to work with packet forgery, because by the time we've
forged a packet and sent it on to the network, it's too late. So, we need to
change our interface back so that there's no delay on the interface. That
means, we're monitoring network data, but we'll miss the original attack
which triggered a Snort alert.

@example
<interface name="eth0" delay="0.0"/>
@end example

Once you have this code working, you might be able to mess with the delay
parameter to see if you can pick a low-latency value that works for you. On
my network, the value 0.02 is low enough to allow a response to allow packet
forgery to work. Any higher, and the forged packets are too late to beat the
real packets.

The LUA interface passes a context variable to many of the LUA functions,
which gives access to @command{cybermon} information and the packet forgery
functions. In this step, we're going to forge a TCP reset on any connections
which are from or to port 80. Hack the configuration file:

@cindex @code{context}

@example
observer.connection_up = function(context)

    -- Get TCP ports.
    local cls, src_addr, dest_addr
    cls, src_addr = context:get_src_addr()
    cls, dest_addr = context:get_dest_addr()

    -- check if it is port 80.
    if not((src_addr == "80") or (dest_addr == "80")) then
      -- Ignore non-HTTP traffic
      return
    end

    -- TCP reset    
    print("Spike! on HTTP connection.")
    context:forge_tcp_reset(context)

end
@end example

Now before we go any further, @command{cybermon} needs to run as root in
order to use either of the packet forgery functions. Packet forgery needs
access to the raw IP socket layer, which is a privileged operation. Start
that up:

@example
cybermon 10000 my.lua
@end example

Now start web browsing, and you should see a bunch of "Spike! on HTTP
connection" messages. Also, you'll see a page saying "The connection was
reset" in your web browser. That's a fairly anti-social configuration to run
on any network. See the @file{tcp_reset.lua} example for a more useful
configuration. It disrupts network traffic going to/from an SSH server which
isn't from your administration workstation.

On any network with an SSH service open to the outside world, you might want
to use firewall rules to prevent access to the SSH service from addresses
outside of your network, but you could use @command{cybermon} as a
belt-and-braces protection mechanism.

Another example is where you know the user community on your network is
being targeted by phishing emails. Your first step is to try to get the
phishing emails out of their inboxes, getting your email provider to filter
the attacks. But a backup attack would be to make sure your users can't get
to the phisher's web site. The http_request function allows us to reset
requests going to a particular web site.

@example
-- This function is called when an HTTP request is observed.
observer.http_request = function(context, method, url, header, body)

    if header["Host"] == "example.org" then
      print("Spike! on HTTP request")
      context:forge_tcp_reset(context)
    end

    if header["Host"] == "www.example.org" then
      print("Spike! on HTTP request")
      context:forge_tcp_reset(context)
    end

end
@end example

@heading Forging a DNS response

@cindex Forging, DNS response

In this step, we'll detect a particular DNS request, and forge a
response. First of all, you'll need to familiarise yourself with host which
is a useful DNS test tool. e.g.

@example
$ host -t a example.org
example.org has address 93.184.216.119
@end example

The @code{example.org} name has been resolved to a particular IP
address. Let's hack the DNS request function in my.lua:

@cindex @code{dns_message}

@example
-- This function is called when a DNS message is observed.
observer.dns_message = function(context, header, queries, answers, auth, add)

  -- Check my assumptions.  Need a DNS query request, with one query,
  -- name is example.org, type 'A', class 'IN'.
  if header.qr == 0 and #queries == 1 and queries[1].name == "example.org"
    and queries[1].type == 1 and queries[1].class == 1 then

    -- Send a fake response

    -- Set query/response flag to 'response'
    header.qr = 1

    -- 1 answer
    answers = @{@}
    answers[1] = @{@}
    answers[1].name = "example.org"
    answers[1].type = 1
    answers[1].class = 1
    answers[1].rdaddress = "1.2.3.4"

    -- 1 answer
    header.ancount = 1

    io.write("Forging DNS response!\n")

    context:forge_dns_response(context, header, queries, answers, @{@}, @{@})

  end

end
@end example

So, this example, checks that the query is one we want to mess with. If it
is, we turn the query structures into response structures, and hand them
back to @command{cybermon} to do a forgery. The above example forges the
address @code{1.2.3.4}. Start up @command{cybermon} with the script:

@example
cybermon 10000 my.lua
@end example

If everything is working your host command will show a different result:

@example
$ host -t a example.org
example.org has address 1.2.3.4
@end example

Haha! Spike! DNS forgery has applications in blocking access to a phishers
resources on the internet, you might want to redirect your users to an
address which is inside your network.

The @command{cybermon} reference page details the LUA interface in detail if
you want to find out what else you can do in your LUA code.

FIXME: Above should be a reference link.

@node Visualisation
@section Visualisation
@cindex Visualisation
@cindex ElasticSearch
@cindex Storing observations

This is the most incomplete part of @command{Cyberprobe}. Look at this part
as demonstrating what might be possible. If you find this interesting, and
feel you could turn this into something more impressive, well... there's a
git check-in with your name on.

@heading Storing observations

Now we need somewhere to store the observations which @command{cybermon}
discovers. There are many candidates for a storage repository, but my
favourite for this sort of scenario is the excellent ElasticSearch (
@url{http://www.elasticsearch.org/}). It is flexible, offers a huge amount
of functionality, and is incredibly simple to interface with, thanks to its
JSON API. So, your next action is to head over to the download page
(@url{http://www.elasticsearch.org/download/}) and get hold of the latest
version. I'm using version 1.3.2 to build this tutorial but the
ElasticSearch API has proven hugely stable, so should work with the latest.

Having downloaded the latest version, you unpack it, and run it e.g.

@example
tar xvfz elasticsearch-0.90.3.tar.gz
cd elasticsearch-0.90.3
bin/elasticsearch -f
@end example

Another brilliant thing about ElasticSearch is that it needs almost no
configuration to get an instance started. You will need to make one
configuration change to ElasticSearch if there are other instances running
on your network: you need need to change @code{cluster.name} to some unique
string in @file{config/elasticsearch.yml}, otherwise your ElasticSearch
instance might join another cluster on your network, which could complicate
things.

You can check you have ElasticSearch up and running using a command such as
this:

@example
wget -q -O- http://localhost:9200
@end example

The response will look something like this:

@cindex JSON

@example
@{
  "ok" : true,
  "status" : 200,
  "name" : "Cybermon",
  "version" : @{
    "number" : "0.90.3",
    "build_hash" : "5c38d6076448b899d758f29443329571e2522410",
    "build_timestamp" : "2013-08-06T13:18:31Z",
    "build_snapshot" : false,
    "lucene_version" : "4.4"
  @},
  "tagline" : "You Know, for Search"
@}
@end example

Once ElasticSearch is running, you can get @command{cybermon} to load
observations into it by using the cyberdb.lua configuration file. So if
you're continuing the tutorial, you can stop @command{cybermon}, and run:

@example
cybermon 10000 @value{PREFIX}/etc/cyberprobe/cyberdb.lua
@end example

After some network data has been observed, you should be able to see results
loaded into ElasticSearch using the following command:

@example
curl -s -XPOST "http://localhost:9200/cybermon/observation/_search?pretty=true" -d '
@{
  "query" : @{
    "match_all": @{@}
  @}
@}
'
@end example

You should see some stuff which looks like data scrolling past on the
screen. If your response looks like the following result, that's not so
good, as it means there are no results. See @code{hits.total}? Zero means no
results.

@example
@{
  "took" : 1,
  "timed_out" : false,
  "_shards" : @{
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  @},
  "hits" : @{
    "total" : 0,
    "max_score" : null,
    "hits" : [ ]
  @}
@}
@end example

If you see a lot of information scrolling past on the screen, that's good.

The @file{cyberdb.lua} configuration file maps the @command{cybermon}
observations into a form which is appropriate to store in
ElasticSearch. Each observation is stored with a 1 hour time-to-live, to
the information is not stored for long.

@cindex Kibana, dashboard
@cindex Dashboard
@heading Visualising observations

Having loaded the observations into ElasticSearch, it's easy to do some
visualisation with Kibana. Kibana is a brilliant, user-configurable
dashboard package designed to sit on ElasticSearch. The dashboard runs in
your browser.

First thing to do is to download and unpack Kibana. Kibana is managed by the
ElasticSearch people, download page is at
@url{http://www.elasticsearch.org/overview/kibana/installation/}.

For production, you would put Kibana on a web server, and configure it with
access to ElasticSearch. For the quickstart all you need to do is unpack it
in a directory, and point your browser at it.

So, to get running, download Kibana, unpack in a directory. Kibana needs one
configuration parameter changed in the config.js file. There's a parameter
called elasticsearch which you need to change to point to your ElasticSearch
instance, so something like this should work:

@example
elasticsearch: "http://localhost:9200",
@end example

Having set that up, you point your browser at the unpacked Kibana file
e.g. ...

@example
file://@value{PREFIX}/dev/kibana/index.html
@end example

and hopefully you see Kibana's "Welcome to Kibana" screen. I've already
built a dashboard you can use, so click on "Load" in the top right-hand
corner of the screen, hover over "Advanced", and then click "Browse" to find
the configuration file I have left for you. A Kibana dashboard schema is
included with the source code, if you installed using make install it should
be bundled in with the documentation at
@file{@value{PREFIX}/share/doc/cyberprobe/kibana-dashboard.json}. If it loads
successfully, you should get a dashboard.

Next step is to save the dashboard using a save icon in the top right of the
dashboard. That way you don't have to keep loading the schema.

@node Threat indicators using STIX
@section Threat indicators using STIX
@cindex STIX
@cindex TAXII
@cindex STIX indicators
@cindex Threat indicators
@cindex Cyber threat indicators

We've been experimenting with an open model for describing cyber
threats. STIX is a community-driven effort to standardise a model for cyber
theat information. TAXII defines a set of services for distributing STIX
information. There's some support in @command{Cyberprobe}, but you should
know that this is very prototype at the moment.

This is what we've got so far:

@itemize

@item
There's a simple CSV file format we've created to describe cyber
threats. This is just for convenience.

@cindex @command{stix-create}
@item
A script, @command{stix-create} which reads the above configuration file,
and converts into a STIX document containing Indicator objects.

@cindex @command{taxii-server}
@item
A script, @command{taxii-server} which acts as a very simple TAXII server,
serving up STIX documents.

@cindex @command{taxii-client}
@item
A script, @command{taxii-client} which connects to a TAXII server, gets STIX
documents and dumps some stuff out.

@cindex @command{taxii-sync-json}
@item
A script @command{taxii-sync-json} which connects to a TAXII server, gets
STIX documents, massages the whole lot into a single JSON form, and dumps
that to a file.

@item
A configuration file for @command{cybermon} which reads the JSON threat
information and reports when theats are observed.

@end itemize

@cindex @code{pyOpenSSL}
@cindex @code{libtaxx}
@cindex @code{stix}
@cindex @code{pip}

Before taking this any further, you need to have Python installed, along
with various dependencies (@code{pyOpenSSL}, @code{libtaxii} and
@code{stix}). The easiest way to install the dependencies is to install
@code{pip}, and issue this command:

@example
sudo pip install libtaxii pyOpenSSL stix
@end example

@heading A STIX document service

The installation bundle includes a couple of CSV files containing some
fictional cyber theats. Search for @file{example1.txt} and
@file{example2.txt}. They may be in @file{@value{PREFIX}/share/doc/cyberprobe}
once you've installed everything. You need to create a data area, and
convert these files into STIX ready for serving:

@example
mkdir /tmp/stix
cd /tmp/stix
mkdir -p data/default
stix-create @value{PREFIX}/share/doc/cyberprobe/example1.txt data/default/1 -i ex:1
stix-create @value{PREFIX}/share/doc/cyberprobe/example2.txt data/default/2 -i ex:2
@end example

Check that you have two new XML files in data/default directory. If they're
there, you're ready to start a STIX server. This will run on port 8080, so
you'll need to use a different port number if you don't like this one. It's
important that this is run from the directory where you just created the
data directory.

@example
taxii-server --port 8080
@end example

If that works, use the test client to communicate:

@example
taxii-client --port 8080
@end example

And you should see some stuff that looks like cyber threat information
dumped on the screen.

@heading Deploying theat information to @command{cybermon}

Now, we use @command{taxii-sync-json} to fetch the STIX information in a
JSON form I can easily ingest into the LUA code:

@example
taxii-sync-json --port 8080
@end example

This should create a JSON file called @file{stix-default-combined.json}.

Finally, stop any running @command{cybermon} processes, and run
@command{cybermon} with a configuration file which reads the JSON file.

@cindex @file{stix-alert.lua}

@example
cybermon 10000 @value{PREFIX}/etc/cyberprobe/stix-alert.lua
@end example

Now, this produces no output, except when activity which hits on a cyber
threat is observed. If you used my sample data, then this activity should
trigger a theat:

@example
wget -q -O- http://www.malware.com/malware.dat
@end example

I should just say at this point, I have no idea if the @code{malware.com}
site is dodgy or not, it just seems to redirect to Wikipedia. Hope they
don't mind us using them for this test.

If this works, you should see the following output:

@example
DNS query for www.malware.com, hits example1:5 (Hostname of malware server)!
DNS query for www.malware.com, hits example1:5 (Hostname of malware server)!
DNS response for www.malware.com, hits example1:5 (Hostname of malware server)!
DNS response for www.malware.com, hits example1:5 (Hostname of malware server)!
HTTP request to http://www.malware.com/malware.dat, hits example1:7 (URL of a page serving malware)!
HTTP request to www.malware.com, hits example1:5 (Hostname of malware server)!
HTTP response from http://www.malware.com/malware.dat, hits example1:7 (URL of a page serving malware)!
@end example

This hits on a number of theat indicators. The hostname www.malware.com is
present in a theat indicator, and it is detected in the HTTP request, and
both the DNS query and response. Also, the URL
@code{http://www.malware.com/malware.dat} is in a threat indicator and it is
detected in both the HTTP request and response.

The @file{stix-alert.lua} configuration file updates its configuration if
the JSON configuration file has changed. So, you can do a round-trip update
by changing the input files, re-running stix-create, using
@command{taxii-sync-json} to fetch the updates, and all without stopping the
monitoring.

The @file{stix-db.lua} configuration file generates ElasticSearch events as
@file{cyberdb.lua} does, but it also adds indicator detection information to
the events. If you use @file{stix-db.lua}, with the Kibana dashboard, the
"Indications" table on the right hand side of the dashboard will show
detected indicators.

@heading Conclusion

All done, I hope you enjoyed the tutorial! Any comments on the software, or
tutorial itself are very welcome! Positive, or negative, we want to hear how
you found the experience.

@node Reference
@chapter Reference

@menu
* @command{cyberprobe} configuration::
* Output streaming protocols::
* Management protocol::
* @command{cybermon} configuration::
@end menu

@node @command{cyberprobe} configuration
@section @command{cyberprobe} configuration
@cindex @command{cyberprobe}, configuration
@cindex @command{cyberprobe}, @code{control}
@cindex @command{cyberprobe}, @code{interfaces}
@cindex @command{cyberprobe}, @code{targets}
@cindex @command{cyberprobe}, @code{endpoints}
@cindex @command{cyberprobe}, @code{snort_alert}
@cindex @code{control}
@cindex @code{interfaces}
@cindex @code{targets}
@cindex @code{endpoints}
@cindex @code{snort_alert}

The configuration file is re-read when it changes, and changes are
immediately actioned.

Sample configuration:

@example
<?xml version="1.0" encoding="ISO-8859-1"?>

<configuration>

  <!-- Start a control interface on port 8888. -->
  <control port="8888" username="admin" password="horse_battery_staple">

  <!-- Set of interfaces to use for collection. -->
  <interfaces>

    <!-- filter element is optional.  Can be used to make sure you don't
         sniff the outbound streams. -->
    <interface name="eth0" filter="not port 10001 and not port 10002"/>

    <-- The delay attribute can be used to specify a delay before packets
           are processed.  In seconds. --> 
    <interface name="eth1" delay="0.5"/>

  </interfaces>

  <!-- Statically targeted addresses. -->
  <targets>
    <target address="192.168.1.1" liid="123456"/>
    <target address="192.168.1.2" liid="123981"/>
    <target address="10.1.1.1" liid="9123780"/>
    <target address="10.1.1.0" liid="591875"/>
    <target address="10.1.1.2" liid="492895"/>
    <target address="10.1.1.3" liid="591875"/>
    <target address="10.1.1.4" liid="591875"/>
    <target address="10.1.1.5" liid="591875"/>
    <target address="10.1.1.6" liid="591875"/>
    <target address="10.1.1.7" liid="591875"/>
    <target address="10.1.1.8" liid="591875"/>
    <target address="10.1.1.9" liid="591875"/>
    <target address="10.1.1.10" liid="591875"/>
    <target address="::4:5:6" class="ipv6" liid="983898"/>
  </targets>

  <!-- Endpoints for delivery of collected packets. -->
  <endpoints>

    <!-- Send collected packets to monitor1:10001 in NHIS 1.1 stream. -->
    <endpoint hostname="monitor1" port="10001" type="nhis1.1"/>

    <!-- Send collected packets to monitor2:10002 in ETSI LI stream. -->
    <endpoint hostname="monitor2" port="10002" type="etsi"/>

  </endpoints>

  <!-- Set of parameters, primarily used to configure the metadata in
       ETSI LI metadata. -->
  <parameters>

    <!-- Value used for deliveryCountryCode and authorizationCountryCode
         in LI PS PDU. Should be 2-character string. -->
    <parameter key="country" value="DE"/>

    <!-- Value used for operatorIdentifier in LI PS PDU. A string up to 16
         characters. -->
    <parameter key="operator" value="Cyber"/>

    <!-- Value used for networkElementIdentifier in LI PS PDU. String up
         to 16 characters in length. -->
    <parameter key="network_element" value="10.8.2.4"/>

    <!-- Value used for interceptionPointID in LI PS PDU. String up
         to 8 characters in length. -->
    <parameter key="interception_point" value="abcd1234"/>

    <!-- Username values used in IPIRI connection.  Key form is
         "username." plus the LIID -->
    <parameter key="username.123456" value="user01@@example.org"/>
    <parameter key="username.123981" value="user02@@example.org"/>
    <parameter key="username.981235" value="user03@@example.org"/>

    <!-- Parameters in this form are used select the LIID which is used
         when packets are collected on Snort alerts.  Basically, this maps
	 the Snort signature ID to a LIID. -->
    <parameter key="snort.1.liid" value="SNORT1"/>
    <parameter key="snort.2.liid" value="SNORT2"/>

   </parameters>

   <!-- Optional element.  Listens for Snort alerts, and dynamically targets
        addresses for 60 seconds. -->
   <!--
   <snort_alert socket="/var/log/snort/snort_alert" duration="60"/>
   -->

</configuration>
@end example

The @code{control} element is optional, if it exists, @command{cyberprobe} runs
a management interface on the specified port. The @code{port},
@code{username} and @code{password} attributes must be specified. See
@ref{Management interface} for how to communicate with that interface.

The @code{interfaces} block defines a set of interfaces to sniff. The
@code{name} attribute is mandatory, the @code{filter} element is optional,
and if specified should describe a BPF (Berkley Packet Filter)
expression. The @code{delay} element can be used to specify, in seconds, the
duration to wait before packets are processed. The delay is specified as a
floating point decimal.

The @code{targets} block defines an IP address to LIID mapping. The
@code{address} attribute defines the IP address used to match on, and the
@code{liid} attribute defines the LIID which will be applied if this
particular IP address is detected. The address must be an IP address, and
not a hostname. The address can be an IPv6 address if the @code{class}
attribute is included, and set to @code{ipv6}.

LIIDs can occur in multiple places in the target block, but an IP address
should only occur once in the target block.

The @code{endpoints} block defines a set of addresses for delivery. The
@code{hostname} and @code{port} attributes should be used to describe the
endpoint address. Type @code{type} attribute should be @code{nhis1.1} or
@code{etsi} to specify which output stream format to use.

The optional @code{parameters} block defines a set of parameters which are
only used in ETSI delivery. Each parameter element should have a @code{key}
and a @code{value} attribute. The parameter values for @code{country},
@code{operator}, @code{network_element} and @code{interception_point}
describe values which are used in the @code{PSHeader} and @code{IRI}
constructs. The parameters with prefix @code{username.} describe values for
the @code{username} values in the IPIRI construct in ETSI LI. The @code{key}
value is the literal @code{username.} suffixed with the LIID. If such an
entry is present, it is used for the @code{username}. All parameters are
optional, meaningless defaults (e.g. unknown) will be used if not specified.

@node Output streaming protocols
@section Output streaming protocols

@cindex NHIS 1.1 LI
@cindex ETSI LI
@cindex NHIS 1.1
@cindex ETSI
@cindex ETSI TS 102 232-1
@cindex TS 102 232-1
@cindex LIID

@command{cyberprobe} supports packet output in one of two output formats,
which are both LI formats. LI formats were chosen as they set good, open
standards for streaming packets to a destination. There are also existing
security products such as firewalls, and analysis tools which understand
with these protocols. The two formats are ETSI LI and NHIS 1.1.

@cindex TS 102 232-3
@cindex ETSI TS 102 232-3
@heading ETSI

The first of the formats supported is the ETSI LI format (see ETSI TS 102
232), which is used in Europe and internationally. The protocol is described
using an ASN.1 specification which can be downloaded from the ETSI
web-site. Google can find the standards. The over-arching TS 102 232-1
standard describes the transport, while the TS 102 232-3 standard describes
putting the IP packets in the transport.

Those adverse to the use of ASN.1 technology may prefer the second format.

@cindex TS 101 671
@cindex ETSI TS 101 671
@heading NHIS 1

NHIS 1.1 which was defined for use in the UK in the 90s, based on GLIC
in ETSI TS 101 671. The protocol is a much simpler header protocol than ETSI
LI, and needs less work to decode.

The standard was available on the internet on the @url{http://gliif.org}
website, but that web-site has recently gone offline.

The bluffers guide to decoding goes...

@itemize

@item
The first 32 bytes after TCP connection are a header. Ignore the first 4
bytes, the latter 28 bytes are the LIID, represented as an ASCII
string. Unused bytes following the LIID are set to zero to pad out to 32
bytes.

@item
Once the start header is sent, the following data consists of IP packets
pre-fixed by a 20 byte header. The only information of note in each 20 byte
header is a 2-byte length field at offset 2 (network byte order). This tells
you the length of the IP packet.

@item
The IP packets are transmitted until the TCP connection closes.  A separate
TCP connection is used for each LIID.

@end itemize

@heading Output semantics

@command{cyberprobe} automatically reconnects to failed destinations, but
the buffering strategy is very simple. When destinations fail, the packets
are buffered in a small queue, but there is limited buffering, so once the
queue fills, packets will start to be dropped. The locking strategy is
simple, so loss of a single endpoint will currently result in data loss to
all endpoints. This may be a problem for operational scenarios where high
data availability is required.

@command{cyberprobe} includes some code to decode the ETSI and NHIS streams,
and also includes two test utilities, @command{etsi_rcvr} and
@command{nhis11_rcvr} which listen on a specified port number, decode the
stream data, and forward in PCAP format on standard output. Example usage
would be:

@example
etsi_rcvr 10001 | tcpdump -n -r-
nhis11_rcvr 10000 | tcpdump -n -r-
@end example

@node Management protocol
@section Management protocol
@cindex Management protocol

@heading Overview

The management interface is a simple interface which supports studying and
dynamically changing the cyberprobe configuration: endpoints, targets and
interfaces.

The configuration file specifies a port number, and username and password
for the interface.

The interface is intended to be used programmatically, but it is usable
using a basic telnet. It is a command-response interface, similar in style
to SMTP.

@heading Commands

Commands are sent, one at a time, as a string terminated by a newline. The
following commands are supported:

@table @code

@item auth <user> <password>
Used on initial connection to authenticate.

@item help
Shows help

@item add_interface <iface> <delay> [<filter>]
Starts packet capture from an interface.

@item remove_interface <iface> <delay> [<filter>]
Removes a previously enabled packet capture.

@item interfaces
Lists all interfaces, output is format @code{iface:delay:filter}.

@item add_endpoint <host> <port> <type>
Adds an endpoint to delivery data to.
where type is one of: @code{etsi} @code{nhis1.1}.

@item remove_endpoint <host> <port> <type>
Removes a previously enabled endpoint.
where type is one of: @code{etsi} @code{nhis1.1}.

@item endpoints
Lists endpoints, format is @code{host:port:type:description}.

@item add_target <liid> <class> <address>
Adds a new targeted IP address.
where class is one of: @code{ipv4} @code{ipv6}

@item remove_target <liid> <class> <address>
Removes a previously targeted IP address.
where class is one of: @code{ipv4} @code{ipv6}

@item targets
Lists targets, format is @code{liid:class:address}.

@item add_parameter <key> <val>
Adds a new parameter, or changes a parameter value.

@item remove_target <key>
Removes a parameter value.

@item parameters
Lists parameters, format is @code{key:value}.

@end table

In response to a command, one of the following responses may occur:

@itemize

@item
An OK response, which is a @code{200} status code and message. e.g.
@code{200 Endpoint added.}

@item
An error message, which is also a status code and message. e.g.
@code{301 Command not known.}

@end itemize

Error codes always start with 3 or 5. A 3xx error code results from
something which is your fault e.g. procedural or syntactic violation, 5xx
error codes result from errors internal to the system. This is still
probably your fault :) e.g. specifying an interface which doesn't exist.

A response with a body, which is a 201 status code and message. This is
followed by a single line containing a response size in bytes, followed by
the response itself. e.g.

@example
201 Interfaces list follows.
8
eth0:1:
@end example

@heading Example session

@example
interfaces
330 Authenticate before continuing.
auth user password
200 Authenticated.
interfaces
201 Interfaces list follows.
8
p4p1:1:
remove_interface p4p1 1
200 Removed interface.
add_interface p4p1 8
200 Added interface.
add_target 123456 ipv4 1.2.3.4
200 Added target.
targets
201 Targets list follows.
65
123456:ipv4:1.2.3.4
123456:ipv4:192.168.1.80
123456:ipv6:::4:5:6
quit
200 Tra, then.
@end example

@node @command{cybermon} configuration
@section @command{cybermon} configuration

@heading Overview

Cybermon is a simple monitoring tool. It receives the ETSI protocol, decodes
the protocols, and makes decoded information available for further handling
which you can specify. The tool is very much a work in progress - it has
limited protocol decode capability at the moment, but there's enough there
to demonstrate the idea.  Usage

Usage is: @code{cybermon <port-number> <config-file>}

You specify a port number to receive data on, and a configuration file
written in Lua. Lua is a simple but powerful scripting language. Here's an
example to help you see how the configuration is used.

@heading Example configuration

The configuration file is there to provide functions which get called when
certain events occur. The calling interface is fairly simple at the moment,
and over time, expect to see a richer interface develop.

To start with, we create the structure of the configuration file. Call it
something with a @code{.lua} extension e.g. @code{config.lua} so that your
editor knows how to indent the code. The basic structure is a module which a
number of functions:

@example
local observer = @{@}

-- This function is called when a trigger events starts collection of an
-- attacker. liid=the trigger ID, addr=trigger address
observer.trigger_up = function(liid, addr)
end

-- This function is called when an attacker goes off the air
observer.trigger_down = function(liid)
end

-- This function is called when a stream-orientated connection is made
-- (e.g. TCP)
observer.connection_up = function(context)
end

-- This function is called when a stream-orientated connection is closed
observer.connection_down = function(context)
end

-- This function is called when a datagram is observed, but the protocol
-- is not recognised.
observer.unrecognised_datagram = function(context, data)
end

-- This function is called when stream data  is observed, but the protocol
-- is not recognised.
observer.unrecognised_stream = function(context, data)
end

-- This function is called when an ICMP message is observed.
observer.icmp = function(context, data)
end

-- This function is called when an HTTP request is observed.
observer.http_request = function(context, method, url, header, body)
end

-- This function is called when an HTTP response is observed.
observer.http_response = function(context, code, status, header, url, body)
end

-- This function is called when a DNS message is observed.
observer.dns_message = function(context, header, queries, answers, auth, add)
end

-- Return the table
return observer
@end example

@cindex LUA events
@cindex @code{cybermon} events
@heading LUA event calls

The configuration file is expected to provide the following functions, which
are called in response to @command{cybermon} events.

@table @code

@item trigger_up(liid, address)

Called when an attacker is seen coming on-stream. The @code{liid} parameter
describes the target ID, and @code{address} contains the IP address in
string form.

@item trigger_down(liid)
Called when an attacker is seen going off-stream. The @code{liid} parameter
describes the target ID.

@item connection_up(context)
Called when a stream-based connection (e.g. TCP) is made. The @code{context}
parameter is a LUA userdata variable which can't be access directly, but can
be used with the functions described below to access further information
from @command{cybermon}.

@item connection_down(context)
Similar to @code{connection_up}, called when a connection closes.

@item icmp(context, data)
Called when an ICMP message is detected. The @code{data} parameter contains
the ICMP message body.

@item http_request(context, method, url, header, body)
Called when an HTTP request is observed. The HTTP method and URL are
described in the @code{method} and @code{url} parameters. The @code{header}
parameter is a LUA table, which describes the HTTP header key/value
pairs. If there is an HTTP payload in the request, it is contained in the
@code{body} parameter, which is a string. Otherwise body will be an empty
string.

@item http_response(context, code, status, header, url, body)
Called when an HTTP response is observed. The HTTP response code and status
are described in the @code{code} and @code{status} parameters. The
@code{header} parameter is a LUA table, which describes the HTTP header
key/value pairs. If there is an HTTP payload in the response, it is
contained in the @code{body} parameter, which is a string. Otherwise body
will be an empty string.

@item smtp_command(context, command)
Called when an SMTP command is observed i.e. a single line message going to
the server from a client. The @code{command} parameter contains the command
string.

@item smtp_response(context, status, text)
Called when an SMTP response is observed. That is, status going from server
to client following a command. The @code{status} parameter is the status
number e.g. 200. The @code{text} parameter contains the response text,
described as a list of strings. Responses may occur over a number of lines,
hence the parameter is a list: For single-line responses, there is only a
single item in the list.

@item smtp_data(context, from, to, data)
Called when an SMTP payload is observed i.e. the body of text following the
DATA command. To aid processing, the SMTP protocol processor assembles
information from other commands: the @code{from} parameter contains the
email From address described in the MAIL FROM command. The @code{to}
parameter is a list of addresses contained in all RCPT TO commands. The
@code{data} parameter contains the email body - it will be an RFC822
payload.

@item ftp_command(context, command)
Called when an FTP command is observed i.e. a single line message going to
the server from a client. The @code{command} parameter contains the command
string.

@item ftp_response(context, status, text)
Called when an FTP response is observed. That is, status going from server
to client following a command. The @code{status} parameter is the status
number e.g. 200. The @code{text} parameter contains the response text,
described as a list of strings. Responses may occur over a number of lines,
hence the parameter is a list: For single-line responses, there is only a
single item in the list.

@item dns_message(context, header, queries, answers, auth, add)
Called when a DNS message is observed. The decoded DNS message is described
in the parameters: @code{header} is the DNS header, @code{queries} contains
the DNS queries, @code{answers} contains the answers in a response message,
@code{auth} contains DNS nameserver authority descriptions, and @code{add}
provides additional information.

@item unrecognised_datagram(context, data)
Called when a datagram is received using a protocol which isn't
recognised. Currently, only DNS and ICMP are recognised. Any other UDP
protocol results in a call to this function.

@item unrecognised_stream(context, data)
Called when connection-orientated data is received using a protocol which
isn't recognised. Currently, only HTTP, SMTP and FTP are recognised. Any
other TCP protocol results in calls to this function whenever data is
observed.

@end table

@cindex @code{context} object
@cindex @code{cybermon} @code{context} object
@heading Context object

From the LUA code there, the @code{context} variable has a number of method
functions which can be called:

@table @code

@item context:get_type()
Returns the protocol type of the context e.g. @code{http}, @code{tcp}, @code{udp}, @code{dns}, @code{ip4}

@item context:get_parent()

Returns the parent context relating to a context. This can be used to travel
"up" the protocol stack. For example, call get_parent on a TCP context will
return the IP context.

@item context:get_src_addr()
Returns the source address relating to a context. Returns two string
variables: the first is the address class e.g. @code{ipv4}, the second is the
address value e.g. @code{1.2.3.4}.

@item context:get_dest_addr()
Returns the destination address relating to a context. Returns two string
variables: the first is the address class e.g. @code{ipv4}, the second is the
address value e.g. @code{1.2.3.4}.

@item context:get_reverse()
Returns the context relating to the "other side" of a communication, but
only if this has been identified. On an HTTP response, @code{get_reverse}
will return the HTTP request. In the @code{http_request} function you will
not be able to use @code{get_reverse} to find the HTTP response because the
response does not exist at the point the request is identified.

@item context:get_id()
Returns a context's unique ID. Can be useful for tracking, or can be used as
index into your own LUA structures to associate information with contexts.

@item context:describe_src()
Returns a human readable description of the protocol stack using source
addresses.

@item context:describe_dest()
Returns a human readable description of the protocol stack using source
addresses.

@item context:get_liid()
Returns the trigger ID associated with a "target".

@item context:get_network_info()
Returns two variables: the source and destination network addresses (IP
addresses) for this data. These are in normal IP address string format.

@item context:get_trigger_info()
Returns the IP address which triggered this collection, if known. If not,
@code{0.0.0.0}x is returned. This is in normal IP address string format.

@item context:forge_tcp_reset()
Creates a TCP reset packet and directs it at the source address associated
with this context. Must have TCP protocol present in the stack.

@item context:forge_dns_response(header, queries, answers, add)
Creates a DNS message and directs it at the source
address associated with this context. The provided parameters are used as
protocol data in the DNS encoder.

@end table

@node Architecture
@chapter Architecture
@cindex Cyberprobe, architecture

Cyberprobe consists of a set of loosely-coupled components which can be
used together. We prefer to use simple interfaces, and prefer to use
interfaces which are standards. Here's how we envisage these components
being used:

@table @code

@item cyberprobe
is a network sniffer which collects packets which match an IP address
list. The packets collected are streamed using network streaming
protocols. The IP address match list can be statically configured (in a
configuration file), can be dynamically changed using a management
interface, or can be dynamically changed as a result of Snort alerts.

@item cybermon
receives packets from cyberprobe, analyses them and generates
session/transport level events which result in user-configurable
actions. For each event, a call is made to a Lua script which the caller
provides.

@item stix-db.lua
is a cybermon configuration file we provide. It translates the cybermon
events into a JSON description which is fed into an ElasticSearch
database. This configuration file also reads a STIX configuration file for
cyber threat indicators. When these indicators are observed, the indicator
meta-data is also added to the JSON events.

@item taxii-server
is a TAXII compliant server, which is used to distribute STIX rules over
HTTP.

@item taxii-client-json
is a TAXII compliant client, which fetches STIX data over TAXII and write it
to a JSON file in a way that @code{stix-db.lua} can read.

@item snort
is not part of cyberprobe, but it's a great NIDS, so we use that.

@end table

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

