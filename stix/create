#!/usr/bin/env python

#
# Converts a simple CSV input file into a STIX document.
#
# Usage:
#   create <input> <output> [<id>]
# Where:
#   input: the input file
#   output: the output file
#   id: optional ID for the STIX document.
#
# Input file format, lines in one of these formats:
#   <id>,email,<description>,<email-address>
#   <id>,ipv4,<description>,<x.x.x.x>
#   <id>,mac,<description>,<x:x:x:x:x:x>
#   <id>,file,<description>,<optional filename>,<optional hash>
#   <id>,hostname,<description>,<hostname>
#   <id>,port,<description>,<tcp|udp>,<portnum>
#   <id>,uri,<description>,<url>
#   <id>,user_account,<description>,<username>,<domain>
#

from stix.core import STIXPackage, STIXHeader
from cybox.core import Observable
from cybox.objects.address_object import Address, EmailAddress
from cybox.objects.file_object import File
from cybox.objects.hostname_object import Hostname
from cybox.objects.port_object import Port
from cybox.objects.uri_object import URI
from cybox.objects.user_account_object import UserAccount
import sys
import csv

# Check arguments
if len(sys.argv) < 3 or len(sys.argv) > 4:
    print "Usage:"
    print "  create <input> <output> [<id>]"
    sys.exit(1)

# Parse arguments
input_file = sys.argv[1]
output_file = sys.argv[2]
if len(sys.argv) == 4:
    id = sys.argv[3]
else:
    id = None

############################################################################
# Helper functions to create different kinds of observable
############################################################################

def create_email_observable(pkg, id, description, email):
    a = EmailAddress(email)
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_ipv4_observable(pkg, id, description, ip):
    a = Address(ip, Address.CAT_IPV4)
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_mac_observable(pkg, id, description, mac):
    a = Address(mac, Address.CAT_MAC)
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_file_observable(pkg, id, description, path, hash):
    a = File()
    if hash != "":
        a.add_hash(hash)
    if path != "":
        a.full_path = path
    a.md5 = True
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_hostname_observable(pkg, id, description, hostname):
    a = Hostname()
    a.hostname_value = hostname
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_port_observable(pkg, id, description, proto, port):
    a = Port()
    a.layer4_protocol = proto
    a.port_value = port
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_uri_observable(pkg, id, description, uri):
    a = URI(uri)
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

def create_user_account_observable(pkg, id, description, username, domain):
    a = UserAccount()
    a.username = username
    a.domain = domain
    o = Observable(a)
    o.id_ = id
    o.description = description
    pkg.add_observable(o)

############################################################################
# main body
############################################################################

# Create STIX header
header = STIXHeader()
header.add_package_intent("Indicators - Watchlist")

# Create STIX package
package = STIXPackage()
package.stix_header = header
if id:
    package.id_ = id

row_count = 0

# Open input file, and parse CSV
input = open(input_file, 'r')
reader = csv.reader(input)
for row in reader:

    row_count = row_count + 1

    if row_count % 1000 == 0:
        print row_count, "..."

    # Print row.
#    print ', '.join(row)

    # Parser id
    id = row[0]
    del row[0]

    # Parse type
    type = row[0]
    del row[0]

    # Parse description
    description = row[0]
    del row[0]
    
    # Parse rest of row and create observable
    if type == 'email':
        create_email_observable(package, id, description, row[0])
    
    if type == 'ipv4':
        create_ipv4_observable(package, id, description, row[0])
    
    if type == 'mac':
        create_mac_observable(package, id, description, row[0])

    if type == 'file':
        create_file_observable(package, id, description, row[0], row[1])

    if type == 'hostname':
        create_hostname_observable(package, id, description, row[0])

    if type == 'port':
        create_port_observable(package, id, description, row[0], row[1])

    if type == 'uri':
        create_uri_observable(package, id, description, row[0])

    if type == 'user_account':
        create_user_account_observable(package, id, description, row[0], row[1])

# Parsing complete, write object to output file
f = open(output_file, 'w')
f.write('<?xml version="1.0"?>')
f.write(package.to_xml())
f.close()

# All done, exit
sys.exit(0)

