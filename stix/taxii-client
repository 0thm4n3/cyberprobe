#!/usr/bin/env python

import sys
import argparse
import dateutil.parser
import libtaxii as t
import libtaxii.messages_11 as tm11
import libtaxii.clients as tc
import libtaxii.taxii_default_query as tdq
from stix.core import STIXPackage, STIXHeader
from cybox.objects.address_object import Address, EmailAddress
from cybox.objects.file_object import File
from cybox.objects.hostname_object import Hostname
from cybox.objects.port_object import Port
from cybox.objects.uri_object import URI
from cybox.objects.user_account_object import UserAccount
import StringIO
import datetime

############################################################################
# Dump a Cybox observable
############################################################################

def dump_indicator(ind):
    
    # Dump stuff out
    if ind.id_:
        print "Id: %s" % ind.id_
    if ind.description:
        print "Description: %s" % ind.description

    # Get object
    obs = ind.observable
    obj = obs.object_.properties

    if isinstance(obj, Address):

        print "Address:"
        if obj.category == Address.CAT_EMAIL:
            print '  Email address: %s' % obj.address_value
        if obj.category == Address.CAT_IPV4:
            print '  IPv4 address: %s' % obj.address_value
        if obj.category == Address.CAT_MAC:
            print '  MAC address: %s' % obj.address_value

    if isinstance(obj, File):
        print "File:"

        if obj.full_path:  print "  Path: %s" % obj.full_path

        if obj.hashes:
            for h in obj.hashes:
                print "  Hash: "
                if h.simple_hash_value:
                    print "    Simple hash: %s" % h.simple_hash_value
                if h.fuzzy_hash_value:
                    print "    Fuzzy hash: %s" % h.fuzzy_hash_value
                if h.type_:
                    print "    Type: %s" % h.type_

    if isinstance(obj, Hostname):
        print "Hostname: %s" % obj.hostname_value

    if isinstance(obj, Port):
        print "Port: %s (%s)" % (obj.port_value, obj.layer4_protocol)

    if isinstance(obj, URI):
        print "URI: %s" % obj.value

    if isinstance(obj, UserAccount):
        print "User account:"
        print "  Username: %s" % obj.username
        print "  Domain: %s" % obj.domain

    print

############################################################################
# Dump a STIX package in human readable form
############################################################################

def dump_package(pkg):

    print

    # Walk through indicators
    for ind in pkg.indicators:
        dump_indicator(ind)

def create_query(args):

    criterion = []

    for q in args.query:

        type, value = q.split(":", 1)

        if type == "address":
            target = "//Address_Value"
        elif type == "addresstype":
            target = "//Object/Properties/@category"
        elif type == "hostname":
            target = "//Hostname_Value"
        elif type == "port":
            target = "//Port_Value"
        elif type == "hash":
            target = "//Hash/Simple_Hash_Value"
        elif type == "id":
            target = "/STIX_Package/@id"
        elif type == "source":
            target = "//Information_Source/Identity/@idref"
        else:
            raise TypeError("Don't understand type '" + type + "'")
        

        params = {'value':value, 'match_type': 'case_sensitive_string'}

        test = tdq.DefaultQuery.Criterion.Test(capability_id=tdq.CM_CORE,
                                               relationship='equals', 
                                               parameters=params)

        cron = tdq.DefaultQuery.Criterion(target=target, test=test, 
                                          negate=False)

        criterion.append(cron)

    criteria = tdq.DefaultQuery.Criteria(operator=tdq.OP_AND, 
                                         criterion=criterion)

    qry=tdq.DefaultQuery(t.CB_STIX_XML_11, criteria)

    return qry

############################################################################
# Perform a TAXII poll
############################################################################

def perform_poll(args):
    
    if args.query != None:
        
        poll_params=tm11.PollRequest.PollParameters(query=create_query(args))

    else:

        poll_params=tm11.PollRequest.PollParameters()

    # Create poll request
    poll_req = tm11.PollRequest(message_id=tm11.generate_message_id(),
                                collection_name=args.collection,
                                exclusive_begin_timestamp_label=begin_ts,
                                inclusive_end_timestamp_label=end_ts,
                                poll_parameters=poll_params)

    # Convert to XML for request body
    poll_req_xml = poll_req.to_xml(True)

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    poll_req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print "End timestamp: %s" % resp.inclusive_end_timestamp_label

    # Process each content block
    for cb in resp.content_blocks:
        
        content = cb.content
        
        # Hack an XML header on the top?! and add the payload body.
        resp = "<?xml version=\"1.0\"?>\n" + content
        
        # Parse the payload, should be a STIX document.
        package = STIXPackage.from_xml(StringIO.StringIO(resp))
        
        # Dump package ID
        if package.id_:
            print "***** Package id: %s" % package.id_
            
            # Dump package
            dump_package(package)

############################################################################
# Perform a TAXII discovery
############################################################################

def perform_discovery(args):

    # Create discovery request
    req = tm11.DiscoveryRequest(message_id=tm11.generate_message_id())

    # Convert to XML for request body
    req_xml = req.to_xml()

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print resp.to_xml()

############################################################################
# Perform a TAXII CollecitonInformationRequest
############################################################################

def perform_collection_information(args):

    # Create discovery request
    msg_id=tm11.generate_message_id()
    req = tm11.CollectionInformationRequest(message_id=msg_id)

    # Convert to XML for request body
    req_xml = req.to_xml()

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print resp.to_xml()

############################################################################
# Perform a TAXII ManageCollectionSubscription
############################################################################

def perform_manage_collection_subscription(args):

    if args.act == "subscribe":
        action = tm11.ACT_SUBSCRIBE
    elif args.act == "unsubscribe":
        action = tm11.ACT_UNSUBSCRIBE
    elif args.act == "pause":
        action = tm11.ACT_PAUSE
    elif args.act == "resume":
        action = tm11.ACT_RESUME
    elif args.act == "status":
        action = tm11.ACT_STATUS
    else:
        print "Need a subscription action I recognise"
        sys.exit(1)

    query = create_query(args)
    subs_id = args.subscription_id
    params = tm11.SubscriptionParameters(query=query)

    # Create request
    msg_id=tm11.generate_message_id()
    req = tm11.ManageCollectionSubscriptionRequest(
        message_id=msg_id,
        collection_name=args.collection,
        action=action,
        subscription_id=subs_id,
        subscription_parameters=params
    )

    print args.act

    # Convert to XML for request body
    req_xml = req.to_xml()

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print resp.to_xml()

############################################################################
# main body
############################################################################

# Parse command line arguments
p = argparse.ArgumentParser(description="TAXII Client")
p.add_argument("--host", dest="host", default="localhost", 
               help="Host where the Poll Service is hosted. "
               "Defaults to localhost.")
p.add_argument("--port", dest="port", default="8080", 
               help="Port where the Poll Service is hosted. Defaults to "
               "8080.")
p.add_argument("--path", dest="path", default="/", 
               help="Path where the Poll Service is hosted. Defaults to "
               "/.")
p.add_argument("--collection", dest="collection", default="default", 
               help="Data Collection to poll. Defaults to 'default'.")
p.add_argument("--begin_timestamp", dest="begin_ts", default=None, 
               help="The begin timestamp (format: "
               "YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm) for the poll request. "
                   "Defaults to None.")
p.add_argument("--end_timestamp", dest="end_ts", default=None, 
               help="The end timestamp (format: "
               "YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm) for the poll request. "
               "Defaults to None.")
p.add_argument("--discovery", "-d", dest="action", action="store_const",
               const="discovery", default=None, help="Discovery action")
p.add_argument("--poll", "-p", dest="action", action="store_const",
               const="poll", default=None, help="Poll action")
p.add_argument("--collection_information", "-c", dest="action", 
               action="store_const", const="collection_information", 
               default=None, help="Collection Information request")
p.add_argument("--manage_collection_subscription", "-m", dest="action", 
               action="store_const", const="manage_collection_subscription", 
               default=None, help="Manage Collection Subscription request")
p.add_argument("--action", "-a", dest="act", default=None, 
               help="Subscription action")
p.add_argument("--query", "-q", dest="query", action="append",
               help="Query in form type:value.  Type can be one of: address, "
               "addresstype, hostname, port, hash, id, source. e.g. "
               "address:1.2.3.4 addresstype:e-mail port:11111.",
               default=None)
p.add_argument("--subs-id", "-s", dest="subscription_id",
               help="Subscription ID", default=None)

args = p.parse_args()

# Parse date/time stuff.
try:
    if args.begin_ts:
        begin_ts = dateutil.parser.parse(args.begin_ts)
        if not begin_ts.tzinfo:
            raise ValueError
    else:
        begin_ts = None

    if args.end_ts:
        end_ts = dateutil.parser.parse(args.end_ts)
        if not end_ts.tzinfo:
            raise ValueError
    else:
        end_ts = None
except ValueError:

    print "Unable to parse timestamp value. Timestamp should include "
    "both date and time information along with a timezone or UTC offset "
    "(e.g., YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm). Aborting poll."
    sys.exit(1)

if args.action == None:
    print "An action must be specified (e.g. --poll)."
    sys.exit(1)

if args.action == "poll":
    perform_poll(args)
elif args.action == "discovery":
    perform_discovery(args)
elif args.action == "collection_information":
    perform_collection_information(args)
elif args.action == "manage_collection_subscription":
    perform_manage_collection_subscription(args)
